// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package org.apache.cloudstack.compute.maas;

import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.naming.ConfigurationException;

import com.cloud.agent.AgentManager;

import com.cloud.api.query.dao.HostJoinDao;
import com.cloud.api.query.dao.UserVmJoinDao;
import com.cloud.api.query.vo.HostJoinVO;
import com.cloud.api.query.vo.UserVmJoinVO;
import com.cloud.configuration.Config;
import com.cloud.dc.ClusterDetailsDao;
import com.cloud.dc.DataCenterVO;
import com.cloud.dc.dao.DataCenterDao;
import com.cloud.utils.crypt.DBEncryptionUtil;
import com.cloud.vm.VirtualMachine;
import org.apache.cloudstack.compute.maas.api.ListMaasServiceOfferingsCmd;
import org.apache.cloudstack.context.CallContext;
import org.apache.cloudstack.framework.config.ConfigKey;
import org.apache.cloudstack.framework.config.Configurable;
import org.apache.log4j.Logger;

import com.cloud.api.query.dao.ServiceOfferingJoinDao;
import com.cloud.api.query.vo.ServiceOfferingJoinVO;
import com.cloud.user.AccountManager;
import com.cloud.utils.component.ManagerBase;
import com.cloud.utils.db.SearchBuilder;
import com.cloud.utils.db.SearchCriteria;
import com.cloud.utils.db.SearchCriteria.Op;
import org.apache.cloudstack.framework.config.dao.ConfigurationDao;

public class MaasManagerImpl extends ManagerBase implements MaasManager, Configurable {

    private static class OfferingStats {
        int total = 0;
        int available = 0;
        int erasing = 0;
    }

    public static final Logger LOGGER = Logger.getLogger(MaasManagerImpl.class.getName());

    @Inject private AgentManager _agentMgr;
    @Inject private AccountManager accountMgr;
    @Inject private DataCenterDao dcDao;
    @Inject protected ConfigurationDao configDao;
    @Inject private ClusterDetailsDao clusterDetailsDao;
    @Inject private ServiceOfferingJoinDao svcOfferingJoinDao;
    @Inject private HostJoinDao _hostJoinDao;
    @Inject private UserVmJoinDao _userVmJoinDao;

    @Override
    public String getConfigComponentName() {
        return MaasManager.class.getSimpleName();
    }

    @Override
    public ConfigKey<?>[] getConfigKeys() {
        return new ConfigKey<?>[] {};
    }

    @Override
    public List<Class<?>> getCommands() {
        List<Class<?>> cmds = new ArrayList<Class<?>>();
        cmds.add(ListMaasServiceOfferingsCmd.class);
        return cmds;
    }

    @Override
    public List<MaasServiceOfferingsResponse> listMaasServiceOfferings(ListMaasServiceOfferingsCmd cmd) throws ConfigurationException, IOException {
        List<MaasServiceOfferingsResponse> responses = new ArrayList<>();

        SearchBuilder<ServiceOfferingJoinVO> serviceOfferingJoinVOSearchBuilder = svcOfferingJoinDao.createSearchBuilder();
        serviceOfferingJoinVOSearchBuilder.and("networkOfferingId", serviceOfferingJoinVOSearchBuilder.entity().getDeploymentPlanner(), Op.EQ);
        SearchCriteria<ServiceOfferingJoinVO> serviceOfferingJoinVOSearchCriteria = serviceOfferingJoinVOSearchBuilder.create();
        serviceOfferingJoinVOSearchCriteria.addAnd("deploymentPlanner", SearchCriteria.Op.EQ, "BareMetalPlanner");
        List<ServiceOfferingJoinVO> offerings = svcOfferingJoinDao.search(serviceOfferingJoinVOSearchCriteria, null);

        if (offerings == null || offerings.size() == 0) {
            return responses;
        }

        List<HostJoinVO> bareMetalHosts = new ArrayList<>();

        if (cmd.getClusterId() != null) {
            if (!accountMgr.isNormalUser(CallContext.current().getCallingAccount().getAccountId())) {
                bareMetalHosts = getHostJoinVOSByClusterId(cmd);
            }
        } else {
            bareMetalHosts = getHostJoinVOSByZoneId(cmd);
        }

        HashMap<String, OfferingStats> bareMetalHostsMap = new HashMap<>();

        for (HostJoinVO host : bareMetalHosts) {
            String key = createSpecKey(host.getTag(), host.getCpus(), host.getSpeed().intValue(), (host.getTotalMemory() / 1048576));
            OfferingStats offeringStats = bareMetalHostsMap.get(key);

            if(offeringStats == null) {
                offeringStats = new OfferingStats();
                bareMetalHostsMap.put(key, offeringStats);
            }

            offeringStats.total++;

            UserVmJoinVO userVm = getVmByHostId(host.getId());
            if(userVm == null) {
                offeringStats.available++;
            } else if(userVm.getState().equals(VirtualMachine.State.Expunging) || userVm.getState().equals(VirtualMachine.State.Destroyed)) {
                offeringStats.erasing++;
            }
        }

        offerings.forEach(svc -> {
            String key = createSpecKey(svc.getHostTag(), svc.getCpu(), svc.getSpeed(), svc.getRamSize());

            OfferingStats offeringStats = bareMetalHostsMap.get(key);
            if(offeringStats == null) {
                offeringStats = new OfferingStats();
            }

            MaasServiceOfferingsResponse response = new MaasServiceOfferingsResponse();
            response.setObjectName("maasserviceoffering");;
            response.setOfferingId(svc.getUuid());
            response.setOfferingName(svc.getName());
            response.setAvailable(offeringStats.available);
            if (accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getAccountId())) {
                response.setTotal(offeringStats.total);
                response.setErasing(offeringStats.erasing);
            }

            responses.add(response);
        });
        return responses;
    }

    private List<HostJoinVO> getHostJoinVOSByClusterId(ListMaasServiceOfferingsCmd cmd) {
        SearchBuilder<HostJoinVO> hostJoinVOSearchBuilder = _hostJoinDao.createSearchBuilder();
        hostJoinVOSearchBuilder.and("hypervisor_type", hostJoinVOSearchBuilder.entity().getHypervisorType(), Op.EQ);
        hostJoinVOSearchBuilder.and("cluster_id", hostJoinVOSearchBuilder.entity().getClusterId(), Op.EQ);
        SearchCriteria<HostJoinVO> hostJoinVOSearchCriteria = hostJoinVOSearchBuilder.create();
        hostJoinVOSearchCriteria.setParameters("hypervisor_type", "BareMetal");
        hostJoinVOSearchCriteria.setParameters("cluster_id", cmd.getClusterId());
        return _hostJoinDao.search(hostJoinVOSearchCriteria, null);
    }

    private List<HostJoinVO> getHostJoinVOSByZoneId(ListMaasServiceOfferingsCmd cmd) {
        List<Long> zoneIds = new ArrayList<>();
        if(cmd.getZoneId() != null) {
            zoneIds.add(cmd.getZoneId());
        } else {
            for(DataCenterVO dataCenterVO : dcDao.listAllZones()) {
                zoneIds.add(dataCenterVO.getId());
            }
        }

        SearchBuilder<HostJoinVO> hostJoinVOSearchBuilder = _hostJoinDao.createSearchBuilder();
        hostJoinVOSearchBuilder.and("hypervisor_type", hostJoinVOSearchBuilder.entity().getHypervisorType(), Op.EQ);
        hostJoinVOSearchBuilder.and("data_center_id", hostJoinVOSearchBuilder.entity().getZoneId(), Op.IN);
        SearchCriteria<HostJoinVO> hostJoinVOSearchCriteria = hostJoinVOSearchBuilder.create();
        hostJoinVOSearchCriteria.setParameters("hypervisor_type", "BareMetal");
        hostJoinVOSearchCriteria.setParameters("data_center_id", zoneIds.toArray(new Object[zoneIds.size()]));
        return _hostJoinDao.search(hostJoinVOSearchCriteria, null);
    }

    private UserVmJoinVO getVmByHostId(long hostId) {
        SearchBuilder<UserVmJoinVO> userVmJoinVOSearchBuilder = _userVmJoinDao.createSearchBuilder();
        userVmJoinVOSearchBuilder.and("hypervisor_type", userVmJoinVOSearchBuilder.entity().getHypervisorType(), Op.EQ);
        userVmJoinVOSearchBuilder.and().op("host_id", userVmJoinVOSearchBuilder.entity().getHostId(), Op.EQ);
        userVmJoinVOSearchBuilder.or("last_host_id", userVmJoinVOSearchBuilder.entity().getLastHostId(), Op.EQ);
        userVmJoinVOSearchBuilder.cp();
        SearchCriteria<UserVmJoinVO> userVmJoinVOSearchCriteria = userVmJoinVOSearchBuilder.create();
        userVmJoinVOSearchCriteria.setParameters("hypervisor_type", "BareMetal");
        userVmJoinVOSearchCriteria.setParameters("host_id", hostId);
        userVmJoinVOSearchCriteria.setParameters("last_host_id", hostId);
        return _userVmJoinDao.findOneBy(userVmJoinVOSearchCriteria);
    }

    @Override
    public MaasApiClient getMaasApiClient(long clusterId) throws ConfigurationException {
        Map<String, String> clusterDetails = clusterDetailsDao.findDetails(clusterId);
        String maasUrl = clusterDetails.get("baremetalMaasHost");
        String maasApiKey = DBEncryptionUtil.decrypt(clusterDetails.get("baremetalMaaSKey"));

        String[] maasAddress = maasUrl.split(":");
        String maasScheme = null;
        String maasIp = null;
        Integer maasPort = -1;

        try {
            // scheme://ip_or_dns:port
            if (maasAddress.length == 3) {
                maasScheme = maasAddress[0];
                maasIp = maasAddress[1].replace("/", "");
                maasPort = Integer.parseInt(maasAddress[2].replace("/", ""));
            }

            // scheme://ip_or_dns OR ip_or_dns:port
            else if (maasAddress.length == 2) {
                if (maasAddress[0].equalsIgnoreCase("http") || maasAddress[0].equalsIgnoreCase("https")) {
                    maasScheme = maasAddress[0];
                    maasIp = maasAddress[1].replace("/", "");
                } else {
                    maasIp = maasAddress[0].replace("/", "");
                    maasPort = Integer.parseInt(maasAddress[1].replace("/", ""));
                }
            }

            // ip_or_dns
            else if (maasAddress.length == 1) {
                maasIp = maasAddress[0];
            }

            else {
                throw new ConfigurationException(maasUrl + " is not a valid URL for MaaS server");
            }
        } catch (NumberFormatException e) {
            if (maasAddress.length == 3) {
                LOGGER.warn(maasAddress[2].replace("/", "") + " is not a valid port number", e);
            } else if (maasAddress.length == 2) {
                LOGGER.warn(maasAddress[1].replace("/", "") + " is not a valid port number", e);
            }

            throw e;
        }

        String[] maasSecrets = maasApiKey.split(":");

        if (maasSecrets.length != 3) {
            LOGGER.warn("MaaS API key is malformed");
            throw new ConfigurationException("MaaS API key is malformed");
        }

        String maasConsumerKey = maasSecrets[0];
        String maasKey = maasSecrets[1];
        String maasSercret = maasSecrets[2];

        int timeout = Integer.parseInt(configDao.getValue(Config.BaremetalProvisionDoneNotificationTimeout.key()));

        return new MaasApiClient(maasScheme, maasIp, maasPort, maasKey,  maasSercret, maasConsumerKey, timeout);
    }

    private String createSpecKey(String tags, int cpus, int speed, long memory) {
        String key = String.format("%s,%s,%s", cpus, speed, memory);
        if(tags != null && !tags.isEmpty()) {
            String[] tagArray = tags.split(",");
            key += String.join(",",
                    Arrays.stream(tagArray).
                            filter(tag -> tag.startsWith("bm")).
                            sorted(Comparator.naturalOrder()).
                            collect(Collectors.toList()));
        }
        return key;
    }

}
